import { useEffect, useState } from "react";
import { useNavigate } from "react-router-dom";

export default function WorkScheduleList() {
    const [workSchedules, setWorkSchedules] = useState([]);  // Danh s√°ch hi·ªÉn th·ªã
    const [allSchedules, setAllSchedules] = useState([]); // Danh s√°ch g·ªëc
    const [loading, setLoading] = useState(false);
    const [day, setDay] = useState("");
    const [month, setMonth] = useState("");
    const [year, setYear] = useState("");
    const navigate = useNavigate(); // Khai b√°o bi·∫øn navigate


    // State ƒë·ªÉ th√™m l·ªãch l√†m vi·ªác
    const [ngayLam, setNgayLam] = useState("");
    const [gioBatDau, setGioBatDau] = useState("");
    const [gioKetThuc, setGioKetThuc] = useState("");
    const [loaiCaTruc, setLoaiCaTruc] = useState("");

    // H√†m l·∫•y to√†n b·ªô danh s√°ch t·ª´ API
    const fetchAllSchedules = async () => {
        setLoading(true);
        try {
            const response = await fetch(`http://localhost:8080/workSchedule`);
            if (!response.ok) {
                throw new Error(`HTTP error! Status: ${response.status}`);
            }
            const data = await response.json();
            setAllSchedules(data.data || []);
            setWorkSchedules(data.data || []);
        } catch (error) {
            console.error("L·ªói khi g·ªçi API:", error.message);
        } finally {
            setLoading(false);
        }
    };

    // G·ªçi API l·∫ßn ƒë·∫ßu khi component ƒë∆∞·ª£c mount
    useEffect(() => {
        fetchAllSchedules();
    }, []);

    // H√†m l·ªçc danh s√°ch theo ng√†y, th√°ng, nƒÉm
    const filterWorkSchedules = () => {
        if (!day && !month && !year) {
            setWorkSchedules(allSchedules); // N·∫øu kh√¥ng nh·∫≠p g√¨, hi·ªÉn th·ªã t·∫•t c·∫£
            return;
        }

        let filtered = allSchedules.filter(ws => {
            let date = new Date(ws.ngayLam);
            return (!day || date.getDate() === parseInt(day)) &&
                   (!month || date.getMonth() + 1 === parseInt(month)) &&
                   (!year || date.getFullYear() === parseInt(year));
        });

        setWorkSchedules(filtered);
    };

    // H√†m th√™m l·ªãch l√†m vi·ªác m·ªõi
    const handleAddSchedule = async () => {
        if (!ngayLam || !gioBatDau || !gioKetThuc || !loaiCaTruc) {
            alert("Vui l√≤ng nh·∫≠p ƒë·∫ßy ƒë·ªß th√¥ng tin!");
            return;
        }

        const newSchedule = {
            ngayLam,
            gioBatDau,
            gioKetThuc,
            loaiCaTruc
        };

        try {
            const response = await fetch(`http://localhost:8080/workSchedule`, {
                method: "POST",
                headers: {
                    "Content-Type": "application/json"
                },
                body: JSON.stringify(newSchedule)
            });

            if (!response.ok) {
                throw new Error(`L·ªói t·∫°o l·ªãch l√†m vi·ªác: ${response.statusText}`);
            }

            const data = await response.json();
            setWorkSchedules([...workSchedules, data.data]); // C·∫≠p nh·∫≠t danh s√°ch hi·ªÉn th·ªã
            setAllSchedules([...allSchedules, data.data]); // C·∫≠p nh·∫≠t danh s√°ch g·ªëc

            // Reset form sau khi th√™m
            setNgayLam("");
            setGioBatDau("");
            setGioKetThuc("");
            setLoaiCaTruc("");

            alert("Th√™m l·ªãch l√†m vi·ªác th√†nh c√¥ng!");
        } catch (error) {
            console.error("L·ªói khi th√™m l·ªãch l√†m vi·ªác:", error);
        }
    };

    // üóëÔ∏è H√†m x√≥a l·ªãch l√†m vi·ªác
    const handleDelete = async (id) => {
        if (window.confirm("B·∫°n c√≥ ch·∫Øc ch·∫Øn mu·ªën x√≥a l·ªãch l√†m vi·ªác n√†y kh√¥ng?")) {
            try {
                const response = await fetch(`http://localhost:8080/workSchedule/${id}`, {
                    method: "DELETE",
                });

                const result = await response.json();
                if (response.ok) {
                    alert(result.message);
                    fetchAllSchedules(); // Load l·∫°i danh s√°ch sau khi x√≥a
                } else {
                    alert("L·ªói khi x√≥a: " + result.message);
                }
            } catch (error) {
                console.error("L·ªói khi x√≥a:", error.message);
            }
        }
    };

    return (
        <div className="container">
            <h1>Qu·∫£n l√Ω l·ªãch l√†m vi·ªác</h1>

            {/* Form l·ªçc */}
            <div className="filter-box">
                <h2>L·ªçc l·ªãch l√†m vi·ªác</h2>
                <div className="filter-inputs">
                    <input type="number" min="1" max="31" placeholder="Ng√†y" value={day} onChange={e => setDay(e.target.value)} />
                    <input type="number" min="1" max="12" placeholder="Th√°ng" value={month} onChange={e => setMonth(e.target.value)} />
                    <input type="number" placeholder="NƒÉm" value={year} onChange={e => setYear(e.target.value)} />
                    <button onClick={filterWorkSchedules}>L·ªçc</button>
                </div>
            </div>

            {/* Form th√™m l·ªãch l√†m vi·ªác */}
            <div className="add-form">
                <h2>Th√™m l·ªãch l√†m vi·ªác</h2>
                <div className="form-group">
                    <input type="date" value={ngayLam} onChange={e => setNgayLam(e.target.value)} />
                    <input type="time" value={gioBatDau} onChange={e => setGioBatDau(e.target.value)} />
                    <input type="time" value={gioKetThuc} onChange={e => setGioKetThuc(e.target.value)} />
                    <input type="text" placeholder="Ca tr·ª±c" value={loaiCaTruc} onChange={e => setLoaiCaTruc(e.target.value)} />
                    <button onClick={handleAddSchedule}>Th√™m</button>
                </div>
            </div>
            
            <div className="work-schedule-container">
            <h2>Danh s√°ch l·ªãch l√†m vi·ªác</h2>
            {loading ? <p className="loading-text">ƒêang t·∫£i...</p> : (
                <table className="work-schedule-table">
                    <thead>
                        <tr>
                            <th>Ng√†y l√†m</th>
                            <th>Gi·ªù b·∫Øt ƒë·∫ßu</th>
                            <th>Gi·ªù k·∫øt th√∫c</th>
                            <th>Ca tr·ª±c</th>
                            <th>H√†nh ƒë·ªông</th>
                        </tr>
                    </thead>
                    <tbody>
                        {workSchedules.length > 0 ? workSchedules.map((ws, index) => (
                            <tr key={index}>
                                <td>{new Date(ws.ngayLam).toLocaleDateString("vi-VN")}</td>
                                <td>{new Date(ws.gioBatDau).toLocaleTimeString()}</td>
                                <td>{new Date(ws.gioKetThuc).toLocaleTimeString()}</td>
                                <td>{ws.loaiCaTruc}</td>
                                <td>
                                    <button className="update-btn" onClick={() => navigate(`/update/${ws._id}`)}>C·∫≠p nh·∫≠t</button>
                                    <button className="delete-btn" onClick={() => handleDelete(ws._id)}>X√≥a</button>
                                </td>
                            </tr>
                        )) : (
                            <tr>
                                <td colSpan="6" className="no-data">Kh√¥ng c√≥ l·ªãch l√†m vi·ªác.</td>
                            </tr>
                        )}
                    </tbody>
                </table>
                )}
            </div>
        </div>
    );
}

